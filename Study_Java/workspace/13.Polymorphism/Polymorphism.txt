○ Polymorphism(다형성)
	- 클래스마다 공통적인 행위정보가 존재 → 추상메소드 구현 ▶ 추상 클래스
	- 상속의 전제 조건에서 하위클래스에서는 반드시 메소드의 재정의(Override)가 필수
	- 하위클래스의 동작방식을 몰라도 하위클래스를 동작 시킬 수 있다 : UpCasting 객체생성
	- 하위클래스의 동작이 수정되더라도 상위클래스 쪽에서는 영향을 미치지 않는다.
	- 상위클래스가 동일한 메세지(명령)로 하위클래스를 서로 다르게 동작시키는 객체지향 개념
	- 유지보수, 확장성이 좋아진다.
	
○ Interface(인터페이스)
	- JAVA는 단일상속만 허용 → 다중상속의 장점을 활용할 필요성 ▶ Interface 구현
	- 모든 메소드는 추상메소드로만 구성된다.
	- 상속받은 하위클래스에서는 반드시 재정의(Override)가 필수
	- Interface의 상속은 implements 키워드 사용
	
	public class A { ~~body~~ } ▶ 일반적인 클래스
	
	public class A extends B { ~~body~~ } ▶ A는 B를 상속받는다(A → B)
	
	public class A extends B implements C { ~~body~~ }
		▶ A(하위)는 B(상위)를 상속받고, C(인터페이스)의 기능을 구현하였다.
		
	public class A extends B implements C, D, E { ~~body~~ }
		▶ A(하위)는 B(상위)를 상속받고, C와 D와 E의 기능을 구현하였다.